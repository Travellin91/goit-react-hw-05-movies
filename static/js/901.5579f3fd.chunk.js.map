{"version":3,"file":"static/js/901.5579f3fd.chunk.js","mappings":"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","sources":["components/Movies/Movies.jsx","components/Pageheading/Pageheading.js","components/service/service.jsx","components/MoviePage/SearchBar.jsx","components/view/MoviesPage.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst MovieList = ({ movies, prevLocation }) => {\n  return (\n    <>\n      <ul>\n        {movies.map(({ id, original_title }) => (\n          <li key={id}>\n            <Link to={{ pathname: `/movies/${id}`, state: { from: prevLocation } }}>\n              <h3>{original_title}</h3>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n};\n\nexport default MovieList;\n","import './PageHeading.styles.css';\n\nexport default function PageHeading({ text }) {\n  return <h1 className='title'>{text}</h1>;\n}","import axios from 'axios';\n\nconst API_KEY = 'f888f3c3fbbc8c9a0c5eba421bbc0c31';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst END_POINTS = {\n  trending: '/trending/movie/week',\n  querySearch: '/search/movie',\n  movieDetails: '/movie',\n  movieCredits: '/credits',\n  movieReviews: '/reviews',\n};\n\nexport const getMovies = async (page = 1) => {\n  const res = await axios.get(\n    `${END_POINTS.trending}?api_key=${API_KEY}&page=${page}&language=en-US&include_adult=false`\n  );\n  return res.data.results;\n};\n\nexport const fetchByQuery = async (query, page = 1) => {\n  const res = await axios.get(\n    `${END_POINTS.querySearch}?api_key=${API_KEY}&page=${page}&query=${query}&language=en-US&include_adult=false`\n  );\n\n  return res.data.results;\n};\n\nexport const fetchMoviesDetails = async id => {\n  const res = await axios.get(\n    `${END_POINTS.movieDetails}/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return res.data;\n};\nexport const fetchMoviesCredits = async id => {\n  const res = await axios.get(\n    `/movie/${id}${END_POINTS.movieCredits}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return res.data.cast;\n};\n\nexport const fetchMoviesReviews = async (id, page = 1) => {\n  const res = await axios.get(\n    `/movie/${id}${END_POINTS.movieReviews}?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n\n  return res.data.results;\n};\n","import 'components/MoviePage/MoviesPage.styles.css';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Searchbar = ({ onSearch }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleQuerySearch = e => {\n    setSearchQuery(e.target.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (searchQuery.trim() === '') {\n      alert('Введіть назву фільму');\n    } else {\n      onSearch(searchQuery);\n      setSearchQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit} className='searchForm'>\n        <input\n          type=\"text\"\n          name=\"searchQuery\"\n          value={searchQuery}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Пошук ...\"\n          onChange={handleQuerySearch}\n          className='searchInput'\n        />\n        <button type=\"submit\" className='searchButton'>\n          Пошук\n        </button>\n      </form>\n    </>\n  );\n};\n\nSearchbar.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n};\n\nexport default Searchbar;\n","import { useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport SearchBar from 'components/MoviePage/SearchBar';\nimport { fetchByQuery } from 'components/service/service.jsx';\nimport MovieList from 'components/Movies/Movies';\nimport Container from 'components/Container/Container';\nimport PageHeading from 'components/Pageheading/Pageheading';\n\nconst MoviesPage = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState({ error: null, message: '' });\n  const [loading, setLoading] = useState(false);\n\n  const location = useLocation();\n  const searchRequest = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchRequest) {\n      return;\n    }\n\n    const fetchMovie = async () => {\n      setLoading(true);\n      try {\n        const results = await fetchByQuery(searchRequest);\n        if (!results.length) {\n          setError({ error: true, message: 'Фільми не знайдені!' });\n        } else {\n          setError({ error: false, message: '' });\n          setMovies(results);\n        }\n      } catch (error) {\n        setError({ error: true, message: 'Упс! Щось пішло не так...' });\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [searchRequest]);\n\n  function onSubmit(value) {\n    setSearchParams({ query: value });\n  }\n\n  return (\n    <>\n      <Container>\n        <PageHeading text={'Пошук фільмів'} />\n        {loading && 'Завантаження ...'}\n        {error.error && <div>{error.message}</div>}\n\n        <SearchBar onSearch={onSubmit} />\n        {movies && <MovieList movies={movies} prevLocation={location} />}\n      </Container>\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["movies","prevLocation","map","id","original_title","to","pathname","state","from","PageHeading","text","className","API_KEY","axios","END_POINTS","getMovies","page","res","data","results","fetchByQuery","query","fetchMoviesDetails","fetchMoviesCredits","cast","fetchMoviesReviews","onSearch","useState","searchQuery","setSearchQuery","onSubmit","e","preventDefault","trim","alert","type","name","value","autoComplete","autoFocus","placeholder","onChange","target","toLowerCase","useSearchParams","searchParams","setSearchParams","setMovies","error","message","setError","loading","setLoading","location","useLocation","searchRequest","get","useEffect","fetchMovie","length","console","log","Container","SearchBar"],"sourceRoot":""}